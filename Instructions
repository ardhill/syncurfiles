=============
Instructions:
=============

=====================================
The Short version on the Instructions
=====================================

1. Pick One Script
---------------
syncurfiles.sh - to run in terminal
syncurfiles-cron.sh - to run as a cron/unattended job


2. Edit These Lines to suit your needs:
-------------------------------------
DRIVE=/media/paul/MyBackupDrive/BackUps

HOMEDIR=/home/secure

DIRSTOSYNC="Documents Music Videos Pictures"


3. Make the Script Exocutable

Job Done!




==========================================
The Longer, More Descriptive Instructions
==========================================

This rsync backup script is a very basic linux script I wrote for backing up my important files to a seperate drive.

In my case, I want to plug in an external USB drive and sync over some of my important directories and their contents.

As I am doing the same commands each time, I wrote a script to automate it.

You could use this in the same was as I do, or have it more automated to run at regular times to a drive available at all times e.g. a seperate drive in your computer, on your network etc. Of course, you can simply use it to sync to another area on the same drive - same partition or different partition - just whatever your use case is. I wanted to do this on a seperate, removeable drive. And lets face it "you can never have too many backups" (Lobsang - The Long Earth series)


Two Files - One Purpose
-----------------------

There are two scripts here, the only difference is that one will give you information on the terminal screen, the other says nothing on the terminal screen, but gives you a log file afterwards in the destination directory.

syncurfiles.sh - Gives You Information in The Terminal Screen

syncurfiles-cron.sh - No terminal output, instead it gives you a log file wich you can open with a text editor in your destination directory.

The log file will be in a directory within your destination directory called 'backup-logs' It will have the date and time on the file name to help you figure out which one you want to view.

Choose one (or two) of the scripts to edit for your purposes.
 

Edit Before Use
------------------

You need to edit the script before you can use to make it back up the things you want, to where you want.

Once you have decided what you will backup and to where, then edit the lines below (in the script) to suit your purposes:

This is your destination - where your back-up will be. You need the absolute file path [1]
DRIVE=/media/paul/MyBackupDrive/BackUps
.
This is the base directory for the folders you wish to back-up, if they are all folders in your 'home' directory, then you don't need to edit this.
HOMEDIR=$HOME

These are the directory names that you wish to back-up
DIRSTOSYNC="Documents Music Videos Pictures"

You need to put the relative path [2]. Relative to the Base Directory you edited (or didn't edit) just before. The script has the base directory as a user's home directory by default, if you still have that then the list of folders to back up are relative to that e.g.
"Documents Videos Pictures" - these are directories inside your home directory, so you just need the names.

But, what if you wanted to back-up something different e.g. maybe you have a directory within your Downloads directory you want to back-up? You don't want the whole Downloads directory, just the one inside for example, maybe a ISOs directory? How do you add that, here is how:
"Downloads/ISOs"

What about a directory not in your home directory, maybe one in the user's root? Let's back up a timeshift directory stored in the users root (one level below your home directory).
"../timeshift"  the ../ tells the computer to go back one directory first, then go into "timeshift"

Between each directory, you need to put a space, and keep double quotes at each end of the list, like in the example
DIRSTOSYNC="Documents Music Videos Pictures"


Where To Put This Script
------------------------

You can put it anywhere your computer really. I guess most people would put it into a directory called scripts or something like that in their "Documents" directory.  For me, I put it in `/usr/local/sbin` then it is in my $PATH for bash. So, I don't have to type the `path/to/my/script/syncurfiles.sh`

From the command line, I just need to type:
syncurfiles.sh

Move from your Downloads directory, to /usr/local/sbin 
sudo cp /Downloads/syncurfiles/syncurfiles.sh /usr/local/sbin


Making It Exocutable
---------------------

With any script, it needs to be exocutable before you can use it, otherwise your computer will just try to read the contents of the file.

So, assuming you have the script in your /usr/local/bin. Copy and paste the following into your terminal.

sudo chmod +x /usr/local/bin/syncurfiles.sh


Running The Script
------------------

If you have put it in the right place and made it exocutable, then to run it, you simply need to type a simple command in your terminal to make it work.

syncurfiles.sh

That's all that is needed, it should be running now.

Once you start the script, let it run, don't stop it and don't close your terminal window until it has completed and you get your command prompt at the end again e.g.
user@LinuxComputer:~$

If you are watching the script on your terminal, there are times when messages are flashing by at great speed, times when you can see the progress of individual larger files coping, and times when it looks like it is doing nothing.

It may look like nothing is happening at times, but it is still working.
Even if you have had a few things come up on the screen like:

sent 137.95K bytes  received 12 bytes  55.19K bytes/sec
total size is 8.05G  speedup is 58,379.04

sent 11.71K bytes  received 12 bytes  23.44K bytes/sec
total size is 3.34G  speedup is 284,841.72

Then the cursor doesn't appear to be doing anything - it is still working in the background. Don't stop it, don't close your terminal window until it has completed and you get your command prompt at the end again e.g.
user@LinuxComputer:~$


Permission denied errors
------------------------

If you are trying to copy files, but get permission denied erros on some files or directories, then you probably need elevated permissions. You need to run the script as sudo
sudo syncurfiles.sh


Automation
----------

If you wish to automate, then once you have edited the script and set the permissions to exocute, you can add the automated task to your crontab. 

DOCUMENTATION STILL IN PROGRESS...





[1] Absolute File Path - This is the path from the absolute root /. So, if you are backing up to a seperate drive, you need to know where Linux says it is. It won't be "My-BackUp-Drive", it may be /media/paul/My-Backup-Drive. Different disributions have different ways to show you this path, for instance some will show you it in the file manager. In the terminal, the command df can tell you - look at the info to the right, under "Mounted On" for the drive/partition you want.
[2] Relative File Path - This is the path, that starts from where your starting from. i.e. it is relative to your position in the file path. In the example here, you are starting in your /home/user directory, so the path starts from there, and not from the absolute root /.
